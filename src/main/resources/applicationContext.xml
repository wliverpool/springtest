<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd"
	default-lazy-init="true">
	
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"></bean>
	<!-- 加载完PropertySourcesPlaceholderConfigurer,可以直接使用${PATH}来获取所在系统的PATH环境变量 -->
	
	<mvc:default-servlet-handler/>
	
	<mvc:annotation-driven/>
	<!-- 缓存配置 -->
	<cache:annotation-driven/>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cache-manager-ref="ehcacheManager"/>
	
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:configLocation="classpath:/ehcache.xml"/>
	
	<context:component-scan base-package=".."/>
	<!-- JSON转换器 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 自定义文件上传转换器 -->
	<bean id="multipartResolver" class="com.action.CustomMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="10485760000" />
		<property name="maxInMemorySize" value="40960" />
	</bean>
	<!--bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"/>
		<property name="maxUploadSize" value="10485760000"/>
		<property name="maxInMemorySize" value="40960"/>
	</bean-->
	
	<!-- 异常处理器 -->
 	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
              <props>
                  <prop key="java.lang.Exception">Exception</prop>
            </props>
        </property>
  </bean>

	<bean id="defaultAnnotationHandlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

	<bean id="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"/>
		<property name="suffix" value=".jsp"/>
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	</bean>
	
	
	
	<!-- 分布式数据库事务开始 -->
	<!-- Atomikos多数据源 -->
	<bean id="secondDatabase" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
	    <property name="uniqueResourceName" value="mysql/b" />
	    <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
	    <property name="xaProperties">
	      <props>
	        <prop key="user">root</prop>
	        <prop key="password">wfmhbbwt</prop>
	        <prop key="URL">jdbc:mysql://localhost:3306/test1?useUnicode=true&amp;characterEncoding=utf-8</prop>
	      </props>
	    </property>
	    <property name="poolSize" value="10" />
	    <property name="reapTimeout" value="20000" />
	    <property name="maxLifetime" value="100"/>
	</bean>
	
	<bean id="firstDatabase" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
	    <property name="uniqueResourceName" value="mysql/a" />
	    <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
	    <property name="xaProperties">
	      <props>
	        <prop key="user">root</prop>
	        <prop key="password">wfmhbbwt</prop>
	        <prop key="URL">jdbc:mysql://localhost:3306/test2?useUnicode=true&amp;characterEncoding=utf-8</prop>
	      </props>
	    </property>
	    <property name="poolSize" value="10" />
	    <property name="reapTimeout" value="20000" />
	    <property name="maxLifetime" value="100"/>
	</bean>
	<!-- atomikos事务管理 -->
	<bean id="atomikosUserTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager">
	    <description>atomikosUserTransactionManager</description>
	    <property name="forceShutdown" value="true" />
	</bean>
	
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
	    <property name="transactionTimeout" value="300" />
	</bean>

  	<bean id="atomikosSpringTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
    	<property name="transactionManager" ref="atomikosUserTransactionManager"/>
    	<property name="userTransaction" ref="atomikosUserTransaction"/>
    	<!-- 必须设置，否则程序出现异常 JtaTransactionManager does not support custom isolation levels by default -->
        <property name="allowCustomIsolationLevels" value="true"/> 
  	</bean>
  	
  	<bean id="jdbcTemplateA" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="firstDatabase"/>
    </bean>
    
    <bean id="jdbcTemplateB" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="secondDatabase"/>
    </bean>
    
    <bean id="liveWarmDao" class="com.dao.atomikos.LiveWarmDao">
    	<property name="jdbcTemplate" ref="jdbcTemplateB"/>
    </bean>
  	
  	<bean id="tmpUserDao" class="com.dao.atomikos.TmpUserDao">
    	<property name="jdbcTemplate" ref="jdbcTemplateA"/>
    </bean>
    
	<tx:advice id="atomikosTxAdvice" transaction-manager="atomikosSpringTransactionManager">  
	    <tx:attributes>  
	        <tx:method name="*" propagation="REQUIRED"/>  
	        <tx:method name="get*" read-only="true"/>  
	    </tx:attributes>  
	</tx:advice>  
	
	<aop:aspectj-autoproxy />
	
	<aop:config proxy-target-class="true">  
	    <aop:pointcut expression="execution (* com.service.atomikos.*.*(..))" id="services"/>  
	    <aop:advisor advice-ref="atomikosTxAdvice" pointcut-ref="services"/>  
	</aop:config> 
	
	<bean id="atomikosService" class="com.service.atomikos.AtomikosService">
		<property name="tmpUserDao" ref="tmpUserDao"/>
		<property name="liveWarmDao" ref="liveWarmDao"/>
	</bean>
	<!-- 分布式数据库事务结束 -->
	
	<!-- 读写分离开始 -->
	<!-- 测试读写分离数据源,写数据源 -->
	<bean id="masterdataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test1?characterEncoding=UTF-8&amp;useUnicode=true" />
        <property name="username" value="root" />
        <property name="password" value="wfmhbbwt" />
    </bean>
	
	<!-- 测试读写分离数据源,读数据源 -->
    <bean id="slavedataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test2?characterEncoding=UTF-8&amp;useUnicode=true" />
        <property name="username" value="root" />
        <property name="password" value="wfmhbbwt" />
    </bean>
    
    <bean id="dataSource" class="com.dao.util.DynamicDataSource">
        <property name="targetDataSources">  
              <map key-type="java.lang.String">  
                  <!-- write -->
                 <entry key="master" value-ref="masterdataSource"/>  
                 <!-- read -->
                 <entry key="slave" value-ref="slavedataSource"/>  
              </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="masterdataSource"/>  
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="userFileDao" class="com.dao.UserFileDao">
    	<property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    
    <bean id="LiverpoolDao" class="com.dao.LiverpoolDao">
    	<property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    
    <bean id="LiverpoolService" class="com.service.LiverpoolService">
    	<property name="lfcDao" ref="LiverpoolDao"/>
    </bean>
	<!-- 读写分离结束 -->
	
	<!-- 系统监控 -->
	<bean id="monitorService" class="com.service.MonitorServiceImpl"/>
	
	<!-- shiro -->
	<bean id="userDao" class="com.dao.UserDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	
	<bean id="roleDao" class="com.dao.RoleDaoImpl"/>
	
	<bean id="permissionDao" class="com.dao.PermissionDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	
	<bean id="userService" class="com.service.UserServiceImpl">
		<property name="userDao" ref="userDao"/>
	</bean>
	
	<!-- spring redis 集成测试 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="200"/>
		<property name="maxIdle" value="200"/>
		<property name="maxWaitMillis" value="0"/>
		<property name="testOnBorrow" value="true"/>
	</bean>
	
	<bean id="jedisCluster" class="com.util.JedisClusterFactory">
		<property name="addressConfig">
			<value>classpath:redis-cluster.properties</value>
		</property>
		<property name="addressKeyPrefix" value="address"/>
		<property name="timeout" value="30000"/>
		<property name="maxRedirections" value="6"/>
		<property name="genericObjectPoolConfig" ref="jedisPoolConfig"/>
	</bean>
	
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="192.168.122.129"/>
		<property name="port" value="6379"/>
		<property name="password" value="liverpool" />
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
	    <property name="connectionFactory" ref="jedisConnectionFactory" />  
	    <property name="keySerializer">  
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    </property>     
	    <property name="valueSerializer">  
	        <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
	    </property>  
	    <property name="hashKeySerializer">    
	       <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
	    </property>  
	    <property name="hashValueSerializer">  
	       <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>    
	    </property>  
	</bean>
	  
    <bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory"/>
    
    <!-- spring mybatis -->
	<bean id="mybatisDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
		<property name="driverClassName">  
		    <value>org.gjt.mm.mysql.Driver</value>  
		</property>  
		<property name="url">
	    <value>jdbc:mysql://localhost:3306/world?useUnicode=true&amp;characterEncoding=UTF-8</value>  
	   	<!--springmybaitis是我的数据库  -->
	    </property>  
	    <property name="username">  
	        <value>root</value>  
	    </property>  
	    <property name="password">  
	        <value>wfmhbbwt</value>  
	    </property>  
	</bean>  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="mybatisDataSource" />  
	    <property name="configLocation" value="classpath:spring-mybatis.xml"></property>  
	</bean>  
	<bean id="mybatisTx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mybatisDataSource" />
    </bean>
    <tx:advice id="mybatisTxAdvice" transaction-manager="mybatisTx">  
	    <tx:attributes>  
	        <tx:method name="*" propagation="REQUIRED"/>  
	        <tx:method name="get*" read-only="true"/>  
	    </tx:attributes>  
	</tx:advice>  
	<aop:config proxy-target-class="true">  
	    <aop:pointcut expression="execution (* com.service.mybatis.*.*(..))" id="mybatisServices"/>  
	    <aop:advisor advice-ref="mybatisTxAdvice" pointcut-ref="mybatisServices"/>  
	</aop:config> 
	<bean id="cityDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.dao.mybatisauto.CityMapper"></property>  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
	</bean> 
	<bean id="cityService" class="com.service.mybatis.CityService"> 
	    <property name="cityMapper" ref="cityDao"></property>
	</bean> 
	
</beans>